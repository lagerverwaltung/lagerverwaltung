package view;

import helper.Misc;
import java.sql.SQLException;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.swing.ListSelectionModel;
import model.Lagerbestand;
import model.table.LagerbestandTableModel;
import model.collection.LagerbestandCollection;


/**
 *
 * @author simon
 */
public class LagerbestandPanel extends javax.swing.JPanel {
    MainFrame mainFrame;
    /**
     * Creates new form LagerbestandPanel
     */
    public LagerbestandPanel() {
        initComponents();
    }
    
    public void setGuest()
    {
        this.pnlActions.setVisible(false);
    }
    
    public JTable gettabMain()
    { 
        return tabMaintable;
    }
    
    public void setTableWidths(JTable table)
    {
        int[] arrWidths = {50, 110, 10, 10, 10, 110,70, 50, 150};
        TableColumn tc;
        table.setRowHeight(23);
        int i = 0;
        for (int width : arrWidths){
            tc = table.getColumnModel().getColumn(i++);
            tc.setPreferredWidth(width);
        }
    }
    
    public void setMainFrame(MainFrame mainFrame)
    {
        this.mainFrame = mainFrame;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpMainPane = new javax.swing.JScrollPane();
        tabMaintable = new javax.swing.JTable();
        lblLagerbestand = new javax.swing.JLabel();
        btnFilterZuruecksetzen = new javax.swing.JButton();
        btnFiltern = new javax.swing.JButton();
        pnlActions = new javax.swing.JPanel();
        btnTeilUmlagern = new javax.swing.JButton();
        btnTeilSplitten = new javax.swing.JButton();
        btnteilEinlagern = new javax.swing.JButton();
        btnTeilAuslagern = new javax.swing.JButton();

        LagerbestandTableModel tm = new LagerbestandTableModel();
        tm.setData(LagerbestandCollection.getInstance());
        tabMaintable.setAutoCreateRowSorter(true);
        tabMaintable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabMaintable.setModel(tm);
        setTableWidths(tabMaintable);
        tabMaintable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabMaintable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        scpMainPane.setViewportView(tabMaintable);

        lblLagerbestand.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblLagerbestand.setText("Lagerbestand");

        btnFilterZuruecksetzen.setText("Filter zur√ºcksetzen");
        btnFilterZuruecksetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterZuruecksetzenActionPerformed(evt);
            }
        });

        btnFiltern.setText("Filtern");
        btnFiltern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilternActionPerformed(evt);
            }
        });

        btnTeilUmlagern.setText("Teile umlagern");
        btnTeilUmlagern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeilUmlagernActionPerformed(evt);
            }
        });

        btnTeilSplitten.setText("Teile splitten");
        btnTeilSplitten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeilSplittenActionPerformed(evt);
            }
        });

        btnteilEinlagern.setText("Teile einlagern");
        btnteilEinlagern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnteilEinlagernActionPerformed(evt);
            }
        });

        btnTeilAuslagern.setText("Teile auslagern");
        btnTeilAuslagern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeilAuslagernActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlActionsLayout = new javax.swing.GroupLayout(pnlActions);
        pnlActions.setLayout(pnlActionsLayout);
        pnlActionsLayout.setHorizontalGroup(
            pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnteilEinlagern, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTeilAuslagern, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTeilUmlagern, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTeilSplitten, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlActionsLayout.setVerticalGroup(
            pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnteilEinlagern)
                    .addComponent(btnTeilAuslagern)
                    .addComponent(btnTeilUmlagern)
                    .addComponent(btnTeilSplitten))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblLagerbestand, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(695, 695, 695)
                            .addComponent(btnFiltern)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnFilterZuruecksetzen))
                        .addComponent(scpMainPane)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblLagerbestand, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilterZuruecksetzen, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltern))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpMainPane, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlActions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnteilEinlagernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnteilEinlagernActionPerformed
        int selectedId;
        String selectedAnschGr;
        if (tabMaintable.getSelectedRow() >= 0) {
            int fachId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            int teilId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());
            
            
            try {
               BestandsaenderungFrame
                       bestandsaenderungFrame = new BestandsaenderungFrame(
                               BestandsaenderungFrame.EINLAGERN_LAGERBESTAND,teilId,fachId);
               bestandsaenderungFrame.setTable(tabMaintable);
               JTable warenbewegung = mainFrame.getPanMain().getWarenbewegung().gettabMain();
                bestandsaenderungFrame.setWarenBewegungTable(warenbewegung);
            } catch (SQLException ex) {
                Misc.printSQLException(mainFrame, ex);
            }
            
            
        } else {
            Misc.createErrorDialog(mainFrame, "Es muss erst ein Teil zum Einlagern aus der "
                    + "Liste gew√§hlt werden!");
        }
    }//GEN-LAST:event_btnteilEinlagernActionPerformed

    private void btnTeilUmlagernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeilUmlagernActionPerformed
        if (tabMaintable.getSelectedRow() >= 0) {

            int fachId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            int teilId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());

            try {

                BestandsaenderungFrame bestandsaenderungFrame = new BestandsaenderungFrame(
                        BestandsaenderungFrame.UMLAGERN, teilId, fachId);

                JTable warenbewegung = mainFrame.getPanMain().getWarenbewegung().gettabMain();
                bestandsaenderungFrame.setWarenBewegungTable(warenbewegung);
                bestandsaenderungFrame.setTable(tabMaintable);
                JTable teileTable = mainFrame.getPanMain().getTeilebestand().getTeileTable();
                bestandsaenderungFrame.setTeileTable(teileTable);
            } catch (SQLException ex) {
                Misc.printSQLException(mainFrame, ex);
            }

        } else {
            Misc.createErrorDialog(mainFrame, "Es muss erst ein Teil zum Auslagern aus der "
                    + "Liste gew√§hlt werden!");
        }
        
    }//GEN-LAST:event_btnTeilUmlagernActionPerformed
    
    /**
     * Formular Teile Auslagern mit Daten()ID,Anschaffungsgrund und Haltbarkeitsdatum bef√ºllen
    */
    private void btnTeilAuslagernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeilAuslagernActionPerformed

        if (tabMaintable.getSelectedRow() >= 0) {

            int fachId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            int teilId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());

            try {

                BestandsaenderungFrame bestandsaenderungFrame = new BestandsaenderungFrame(
                        BestandsaenderungFrame.AUSLAGERN, teilId, fachId);

                bestandsaenderungFrame.setTable(tabMaintable);
                JTable warenbewegung = mainFrame.getPanMain().getWarenbewegung().gettabMain();
                bestandsaenderungFrame.setWarenBewegungTable(warenbewegung);
                
                JTable teileTable = mainFrame.getPanMain().getTeilebestand().getTeileTable();
                bestandsaenderungFrame.setTeileTable(teileTable);
            } catch (SQLException ex) {
                Misc.printSQLException(mainFrame, ex);
            }

        } else {
            Misc.createErrorDialog(mainFrame, "Es muss erst ein Teil zum Auslagern aus der "
                    + "Liste gew√§hlt werden!");
        }
                 
    }//GEN-LAST:event_btnTeilAuslagernActionPerformed

    private void btnTeilSplittenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeilSplittenActionPerformed

        if (tabMaintable.getSelectedRow() >= 0) {
            int fachId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            int teilId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());

            try {
                BestandsaenderungFrame bestandsaenderungFrame = new BestandsaenderungFrame(BestandsaenderungFrame.SPLITTEN, teilId, fachId);
                JTable warenbewegung = mainFrame.getPanMain().getWarenbewegung().gettabMain();
                bestandsaenderungFrame.setWarenBewegungTable(warenbewegung);
                bestandsaenderungFrame.setVisible(true);
                bestandsaenderungFrame.setTable(tabMaintable);
            } catch (SQLException e) {
                Misc.printSQLException(mainFrame, e);
            }
        }
        else{
            Misc.createErrorDialog(mainFrame, "Es muss erst ein Teil zum Splitten aus der "
                    + "Liste gew√§hlt werden!");
        }
    }//GEN-LAST:event_btnTeilSplittenActionPerformed

    private void btnFilternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilternActionPerformed
        LagerbestandFilterFrame.getInstance(mainFrame, tabMaintable);
    }//GEN-LAST:event_btnFilternActionPerformed

    private void btnFilterZuruecksetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterZuruecksetzenActionPerformed
        refreshLagerbestandTableModel();
    }//GEN-LAST:event_btnFilterZuruecksetzenActionPerformed

    /**
     * l√§d die Lagerbestandstabelle nach
     */
    private void refreshLagerbestandTableModel() {
        LagerbestandCollection lc = LagerbestandCollection.getInstance(true);
        LagerbestandTableModel lm = new LagerbestandTableModel();
        lm.setData(lc);
        tabMaintable.setModel(lm);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilterZuruecksetzen;
    private javax.swing.JButton btnFiltern;
    private javax.swing.JButton btnTeilAuslagern;
    private javax.swing.JButton btnTeilSplitten;
    private javax.swing.JButton btnTeilUmlagern;
    private javax.swing.JButton btnteilEinlagern;
    private javax.swing.JLabel lblLagerbestand;
    private javax.swing.JPanel pnlActions;
    private javax.swing.JScrollPane scpMainPane;
    private javax.swing.JTable tabMaintable;
    // End of variables declaration//GEN-END:variables
}
