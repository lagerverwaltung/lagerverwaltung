package view;

import helper.Misc;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import javax.swing.ListSelectionModel;
import model.Lager;
import model.Lagerbestand;
import model.table.LagerbestandTableModel;
import model.table.TeileTableModel;
import model.collection.LagerbestandCollection;
// import model.table.WarenbewegungTableModel;


/**
 *
 * @author simon
 */
public class LagerbestandPanel extends javax.swing.JPanel {
    MainFrame mainFrame;
    /**
     * Creates new form LagerbestandPanel
     */
    public LagerbestandPanel() {
        initComponents();
    }
    
    public JTable gettabMain()
    { 
        return tabMaintable;
    }
    
    public void setTableWidths(JTable table)
    {
        int[] arrWidths = {50, 110, 10, 10, 10, 110,70, 50, 150};
        TableColumn tc;
        table.setRowHeight(23);
        int i = 0;
        for (int width : arrWidths){
            tc = table.getColumnModel().getColumn(i++);
            tc.setPreferredWidth(width);
        }
    }
    
    public void setMainFrame(MainFrame mainFrame)
    {
        this.mainFrame = mainFrame;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpMainPane = new javax.swing.JScrollPane();
        tabMaintable = new javax.swing.JTable();
        lblLagerbestand = new javax.swing.JLabel();
        btnteilEinlagern = new javax.swing.JButton();
        btnTeilUmlagern = new javax.swing.JButton();
        btnFilterZuruecksetzen = new javax.swing.JButton();
        btnTeilAuslagern = new javax.swing.JButton();
        btnTeilSplitten = new javax.swing.JButton();
        btnFiltern = new javax.swing.JButton();

        LagerbestandTableModel tm = new LagerbestandTableModel();
        tm.setData(LagerbestandCollection.getInstance());
        tabMaintable.setAutoCreateRowSorter(true);
        tabMaintable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabMaintable.setModel(tm);
        setTableWidths(tabMaintable);
        tabMaintable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabMaintable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        scpMainPane.setViewportView(tabMaintable);

        lblLagerbestand.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblLagerbestand.setText("Lagerbestand");

        btnteilEinlagern.setText("Teile einlagern");
        btnteilEinlagern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnteilEinlagernActionPerformed(evt);
            }
        });

        btnTeilUmlagern.setText("Teile umlagern");
        btnTeilUmlagern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeilUmlagernActionPerformed(evt);
            }
        });

        btnFilterZuruecksetzen.setText("Filter zurücksetzen");

        btnTeilAuslagern.setText("Teile auslagern");
        btnTeilAuslagern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeilAuslagernActionPerformed(evt);
            }
        });

        btnTeilSplitten.setText("Teile splitten");
        btnTeilSplitten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeilSplittenActionPerformed(evt);
            }
        });

        btnFiltern.setText("Filtern");
        btnFiltern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilternActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblLagerbestand, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnteilEinlagern, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTeilAuslagern, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTeilUmlagern, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTeilSplitten, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(695, 695, 695)
                        .addComponent(btnFiltern)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFilterZuruecksetzen))
                    .addComponent(scpMainPane))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblLagerbestand, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilterZuruecksetzen, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltern))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpMainPane, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnteilEinlagern)
                    .addComponent(btnTeilAuslagern)
                    .addComponent(btnTeilUmlagern)
                    .addComponent(btnTeilSplitten))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnteilEinlagernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnteilEinlagernActionPerformed
        int selectedId;
        String selectedAnschGr;
        if (tabMaintable.getSelectedRow() >= 0) {
            selectedId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());
            /**
             * Anschaffungsgrund Attribute wird aus der Tabelle
             * tabMainTable(Lagerbestandstabelle) aus der 8.Position
             * herausgezogen
             
            selectedAnschGr = tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 8).toString();
            //hier wird späterWert Attribut Haltbarkeitsdatum hbDateaus der Tabelle Warenbewegung ausgelesen, Wie kriege ich die Attribute aus der Warenbewegungstabelle?
            int x = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 2).toString());
            int y = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 3).toString());
            int z = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 4).toString());
            int fachid = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            Lager.Lagerort lo = (Lager.Lagerort) tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 1);
                        BestandsaenderungFrame bestandsaenderungFrame = new BestandsaenderungFrame(true, selectedId, true, x, y, z, lo, fachid, selectedAnschGr);

            */
            
            int fachId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            int teilId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());
       
            // Deprecated
            
            int lagerbestandId = 0;
            Lagerbestand lagerbestand = new Lagerbestand();
            try {
                lagerbestandId = Lagerbestand.getLagerbestandID(teilId, fachId);
                lagerbestand = Lagerbestand.getLagerbestand(lagerbestandId);
            } catch (SQLException ex) {
                Logger.getLogger(LagerbestandPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            BestandsaenderungFrame bestandsaenderungFrame = new BestandsaenderungFrame(true, true, lagerbestand);
            bestandsaenderungFrame.setVisible(true);
            try {
                bestandsaenderungFrame.initLagerbestand(selectedId);
            } catch (SQLException ex) {
                Misc.printSQLException(mainFrame, ex);
            }
            
            /* new
            BestandsaenderungFrame bestandsaenderungFrame =null;
            try {
                bestandsaenderungFrame = new BestandsaenderungFrame(BestandsaenderungFrame.EINLAGERN_LAGERBESTAND,teilId,fachId);
            } catch (SQLException ex) {
                Misc.createErrorDialog(mainFrame, "DB Fehler");
            }
            bestandsaenderungFrame.setTable(tabMaintable);
            */
        } else {
            Misc.createErrorDialog(mainFrame, "Es muss erst ein Teil zum Einlagern aus der "
                    + "Liste gewählt werden!");
        }
    }//GEN-LAST:event_btnteilEinlagernActionPerformed

    private void btnTeilUmlagernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeilUmlagernActionPerformed
        int selectedId;
        if (tabMaintable.getSelectedRow() >= 0) {
            /*
            selectedId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());
            Lager.Lagerort lo = (Lager.Lagerort) tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 1);
            int x = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 2).toString());
            int y = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 3).toString());
            int z = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 4).toString());
           
           // int fachid = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
           
            
            UmlagernFrame umlagernframe = new UmlagernFrame(true, selectedId,x,y,z,lo);
            */
            int fachId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            int teilId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());
            int lagerbestandId = 0;
            Lagerbestand lb = new Lagerbestand();
            try {
                lagerbestandId = Lagerbestand.getLagerbestandID(teilId, fachId);
                lb = Lagerbestand.getLagerbestand(lagerbestandId);
            } catch (SQLException ex) {
                Logger.getLogger(LagerbestandPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            UmlagernFrame umlagernFrame = new UmlagernFrame(true, lb);
            umlagernFrame.setVisible(true);
            try {
                umlagernFrame.initUmlagernObj(lagerbestandId);
            } catch (SQLException ex) {
                Misc.printSQLException(mainFrame, ex);
            }
            umlagernFrame.setTable(tabMaintable);
        } else {
            Misc.createErrorDialog(mainFrame, "Es muss Teil ausgewählt werden");
        }
        
    }//GEN-LAST:event_btnTeilUmlagernActionPerformed
    
    /**
     * Formulaar Teile Auslager mit Daten()ID,Anschaffungsgrund und Haltbarkeitsdatum befüllenbefüllen
    */
    private void btnTeilAuslagernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeilAuslagernActionPerformed

        if (tabMaintable.getSelectedRow() >= 0) {

            int fachId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 0).toString());
            int teilId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());
           
            // Deprecated
            int lagerbestandId = 0;
            Lagerbestand lb = new Lagerbestand();
            try {
                lagerbestandId = Lagerbestand.getLagerbestandID(teilId, fachId);
                lb = Lagerbestand.getLagerbestand(lagerbestandId);
            } catch (SQLException ex) {
                Logger.getLogger(LagerbestandPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            BestandsaenderungFrame bestandsaenderungFrame = new BestandsaenderungFrame(true, lb);
            bestandsaenderungFrame.setVisible(true);
            try {
                bestandsaenderungFrame.initLagerbestand(lagerbestandId);
            } catch (SQLException ex) {
                Misc.printSQLException(mainFrame, ex);
            }
            
            
            /* new
            BestandsaenderungFrame bestandsaenderungFrame =null;
            try {
                bestandsaenderungFrame = new BestandsaenderungFrame(BestandsaenderungFrame.AUSLAGERN,teilId,fachId);
            } catch (SQLException ex) {
                Misc.createErrorDialog(mainFrame, "DB Fehler");
            }
            */
            bestandsaenderungFrame.setTable(tabMaintable);
            JTable teileTable = mainFrame.getPanMain().getTeilebestand().getTeileTable();
            bestandsaenderungFrame.setTeileTable(teileTable);
        } else {
            Misc.createErrorDialog(mainFrame, "Es muss erst ein Teil zum Auslagern aus der "
                    + "Liste gewählt werden!");
        }
                          
    }//GEN-LAST:event_btnTeilAuslagernActionPerformed

    private void btnTeilSplittenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeilSplittenActionPerformed
       // int selectedId;
       //String selectedAnschGr;
        if(tabMaintable.getSelectedRow() >=0){
      //  selectedId = Integer.parseInt(tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 6).toString());
        /**
         * Anschaffungsgrund Attribute wird aus der Tabelle tabMainTable(Lagerbestandstabelle) aus der 8.Position herausgezogen
          */
       // selectedAnschGr = tabMaintable.getValueAt(tabMaintable.getSelectedRow(), 8).toString();
        //hier wird späterWert Attribut Haltbarkeitsdatum hbDateaus der Tabelle Warenbewegung ausgelesen, Wie kriege ich die Attribute aus der Warenbewegungstabelle?
        
        BestandsaenderungFrame bestandsaenderungFrame = new BestandsaenderungFrame(true);
        bestandsaenderungFrame.setVisible(true);
   //     bestandsaenderungFrame.initLagerObjekt(selectedId);
        bestandsaenderungFrame.setTable(tabMaintable);
        }
        else{
            Misc.createErrorDialog(mainFrame, "Es muss erst ein Teil zum Splitten aus der "
                    + "Liste gewählt werden!");
        }
    }//GEN-LAST:event_btnTeilSplittenActionPerformed

    private void btnFilternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilternActionPerformed
        LagerbestandFilterFrame.getInstance(mainFrame);
    }//GEN-LAST:event_btnFilternActionPerformed
//ich brauch hier neue Variable JTable Warnebewegungstable
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilterZuruecksetzen;
    private javax.swing.JButton btnFiltern;
    private javax.swing.JButton btnTeilAuslagern;
    private javax.swing.JButton btnTeilSplitten;
    private javax.swing.JButton btnTeilUmlagern;
    private javax.swing.JButton btnteilEinlagern;
    private javax.swing.JLabel lblLagerbestand;
    private javax.swing.JScrollPane scpMainPane;
    private javax.swing.JTable tabMaintable;
    // End of variables declaration//GEN-END:variables
}
